# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-11-20 00:59
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('machines', '0105_dname_ttl'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='domain',
            options={'permissions': (('view_domain', 'Can view a domain object'), ('change_ttl', 'Can change the TTL of a domain object')), 'verbose_name': 'domain', 'verbose_name_plural': 'domains'},
        ),
        migrations.AlterField(
            model_name='extension',
            name='dnssec',
            field=models.BooleanField(default=False, help_text='Should the zone be signed with DNSSEC.'),
        ),
        migrations.AlterField(
            model_name='extension',
            name='name',
            field=models.CharField(help_text='Zone name, must begin with a dot (.example.org).', max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='extension',
            name='origin',
            field=models.ForeignKey(blank=True, help_text='A record associated with the zone.', null=True, on_delete=django.db.models.deletion.PROTECT, to='machines.IpList'),
        ),
        migrations.AlterField(
            model_name='extension',
            name='origin_v6',
            field=models.GenericIPAddressField(blank=True, help_text='AAAA record associated with the zone.', null=True, protocol='IPv6'),
        ),
        migrations.AlterField(
            model_name='iptype',
            name='domaine_ip_netmask',
            field=models.IntegerField(default=24, help_text="Netmask for the domain's IPv4 range.", validators=[django.core.validators.MaxValueValidator(31), django.core.validators.MinValueValidator(8)]),
        ),
        migrations.AlterField(
            model_name='iptype',
            name='domaine_ip_network',
            field=models.GenericIPAddressField(blank=True, help_text="Network containing the domain's IPv4 range (optional).", null=True, protocol='IPv4'),
        ),
        migrations.AlterField(
            model_name='iptype',
            name='reverse_v4',
            field=models.BooleanField(default=False, help_text='Enable reverse DNS for IPv4.'),
        ),
        migrations.AlterField(
            model_name='iptype',
            name='reverse_v6',
            field=models.BooleanField(default=False, help_text='Enable reverse DNS for IPv6.'),
        ),
        migrations.AlterField(
            model_name='machine',
            name='name',
            field=models.CharField(blank=True, help_text='Optional.', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='soa',
            name='expire',
            field=models.PositiveIntegerField(default=3600000, help_text='Seconds before the secondary DNS stop answering requests in case of primary DNS timeout.'),
        ),
        migrations.AlterField(
            model_name='soa',
            name='mail',
            field=models.EmailField(help_text='Contact email address for the zone.', max_length=254),
        ),
        migrations.AlterField(
            model_name='soa',
            name='refresh',
            field=models.PositiveIntegerField(default=86400, help_text='Seconds before the secondary DNS have to ask the primary DNS serial to detect a modification.'),
        ),
        migrations.AlterField(
            model_name='soa',
            name='retry',
            field=models.PositiveIntegerField(default=7200, help_text='Seconds before the secondary DNS ask the serial again in case of a primary DNS timeout.'),
        ),
        migrations.AlterField(
            model_name='soa',
            name='ttl',
            field=models.PositiveIntegerField(default=172800, help_text='Time To Live.'),
        ),
        migrations.AlterField(
            model_name='srv',
            name='port',
            field=models.PositiveIntegerField(help_text='TCP/UDP port.', validators=[django.core.validators.MaxValueValidator(65535)]),
        ),
        migrations.AlterField(
            model_name='srv',
            name='priority',
            field=models.PositiveIntegerField(default=0, help_text='Priority of the target server (positive integer value, the lower it is, the more the server will be used if available).', validators=[django.core.validators.MaxValueValidator(65535)]),
        ),
        migrations.AlterField(
            model_name='srv',
            name='target',
            field=models.ForeignKey(help_text='Target server.', on_delete=django.db.models.deletion.PROTECT, to='machines.Domain'),
        ),
        migrations.AlterField(
            model_name='srv',
            name='ttl',
            field=models.PositiveIntegerField(default=172800, help_text='Time To Live.'),
        ),
        migrations.AlterField(
            model_name='srv',
            name='weight',
            field=models.PositiveIntegerField(default=0, help_text='Relative weight for records with the same priority (integer value between 0 and 65535).', validators=[django.core.validators.MaxValueValidator(65535)]),
        ),
        migrations.AlterField(
            model_name='sshfp',
            name='comment',
            field=models.CharField(blank=True, help_text='Comment.', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='sshfp',
            name='pub_key_entry',
            field=models.TextField(help_text='SSH public key.', max_length=2048),
        ),
        migrations.AlterField(
            model_name='vlan',
            name='igmp',
            field=models.BooleanField(default=False, help_text='v4 multicast management.'),
        ),
        migrations.AlterField(
            model_name='vlan',
            name='mld',
            field=models.BooleanField(default=False, help_text='v6 multicast management.'),
        ),
    ]
