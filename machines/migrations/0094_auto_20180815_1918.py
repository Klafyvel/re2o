# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2018-08-15 17:18
from __future__ import unicode_literals

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('machines', '0093_auto_20180807_1115'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='dname',
            options={'permissions': (('view_dname', 'Can view a DNAME record object'),), 'verbose_name': 'DNAME record', 'verbose_name_plural': 'DNAME records'},
        ),
        migrations.AlterModelOptions(
            name='domain',
            options={'permissions': (('view_domain', 'Can view a domain object'),), 'verbose_name': 'domain', 'verbose_name_plural': 'domains'},
        ),
        migrations.AlterModelOptions(
            name='extension',
            options={'permissions': (('view_extension', 'Can view an extension object'), ('use_all_extension', 'Can use all extensions')), 'verbose_name': 'DNS extension', 'verbose_name_plural': 'DNS extensions'},
        ),
        migrations.AlterModelOptions(
            name='interface',
            options={'permissions': (('view_interface', 'Can view an interface object'), ('change_interface_machine', 'Can change the owner of an interface')), 'verbose_name': 'interface', 'verbose_name_plural': 'interfaces'},
        ),
        migrations.AlterModelOptions(
            name='iplist',
            options={'permissions': (('view_iplist', 'Can view an IPv4 addresses list object'),), 'verbose_name': 'IPv4 addresses list', 'verbose_name_plural': 'IPv4 addresses lists'},
        ),
        migrations.AlterModelOptions(
            name='iptype',
            options={'permissions': (('view_iptype', 'Can view an IP type object'), ('use_all_iptype', 'Can use all IP types')), 'verbose_name': 'IP type', 'verbose_name_plural': 'IP types'},
        ),
        migrations.AlterModelOptions(
            name='ipv6list',
            options={'permissions': (('view_ipv6list', 'Can view an IPv6 addresses list object'), ('change_ipv6list_slaac_ip', 'Can change the SLAAC value of an IPv6 addresses list')), 'verbose_name': 'IPv6 addresses list', 'verbose_name_plural': 'IPv6 addresses lists'},
        ),
        migrations.AlterModelOptions(
            name='machine',
            options={'permissions': (('view_machine', 'Can view a machine object'), ('change_machine_user', 'Can change the user of a machine')), 'verbose_name': 'machine', 'verbose_name_plural': 'machines'},
        ),
        migrations.AlterModelOptions(
            name='machinetype',
            options={'permissions': (('view_machinetype', 'Can view a machine type object'), ('use_all_machinetype', 'Can use all machine types')), 'verbose_name': 'machine type', 'verbose_name_plural': 'machine types'},
        ),
        migrations.AlterModelOptions(
            name='mx',
            options={'permissions': (('view_mx', 'Can view an MX record object'),), 'verbose_name': 'MX record', 'verbose_name_plural': 'MX records'},
        ),
        migrations.AlterModelOptions(
            name='nas',
            options={'permissions': (('view_nas', 'Can view a NAS device object'),), 'verbose_name': 'NAS device', 'verbose_name_plural': 'NAS devices'},
        ),
        migrations.AlterModelOptions(
            name='ns',
            options={'permissions': (('view_ns', 'Can view an NS record object'),), 'verbose_name': 'NS record', 'verbose_name_plural': 'NS records'},
        ),
        migrations.AlterModelOptions(
            name='ouvertureport',
            options={'verbose_name': 'ports openings'},
        ),
        migrations.AlterModelOptions(
            name='ouvertureportlist',
            options={'permissions': (('view_ouvertureportlist', 'Can view a ports opening list object'),), 'verbose_name': 'ports opening list', 'verbose_name_plural': 'ports opening lists'},
        ),
        migrations.AlterModelOptions(
            name='role',
            options={'permissions': (('view_role', 'Can view a role object'),), 'verbose_name': 'server role', 'verbose_name_plural': 'server roles'},
        ),
        migrations.AlterModelOptions(
            name='service',
            options={'permissions': (('view_service', 'Can view a service object'),), 'verbose_name': 'service to generate (DHCP, DNS, ...)', 'verbose_name_plural': 'services to generate (DHCP, DNS, ...)'},
        ),
        migrations.AlterModelOptions(
            name='service_link',
            options={'permissions': (('view_service_link', 'Can view a service server link object'),), 'verbose_name': 'link between service and server', 'verbose_name_plural': 'links between service and server'},
        ),
        migrations.AlterModelOptions(
            name='soa',
            options={'permissions': (('view_soa', 'Can view an SOA record object'),), 'verbose_name': 'SOA record', 'verbose_name_plural': 'SOA records'},
        ),
        migrations.AlterModelOptions(
            name='srv',
            options={'permissions': (('view_srv', 'Can view an SRV record object'),), 'verbose_name': 'SRV record', 'verbose_name_plural': 'SRV records'},
        ),
        migrations.AlterModelOptions(
            name='sshfp',
            options={'permissions': (('view_sshfp', 'Can view an SSHFP record object'),), 'verbose_name': 'SSHFP record', 'verbose_name_plural': 'SSHFP records'},
        ),
        migrations.AlterModelOptions(
            name='txt',
            options={'permissions': (('view_txt', 'Can view a TXT record object'),), 'verbose_name': 'TXT record', 'verbose_name_plural': 'TXT records'},
        ),
        migrations.AlterModelOptions(
            name='vlan',
            options={'permissions': (('view_vlan', 'Can view a VLAN object'),), 'verbose_name': 'VLAN', 'verbose_name_plural': 'VLANs'},
        ),
        migrations.AlterField(
            model_name='domain',
            name='name',
            field=models.CharField(help_text='Mandatory and unique, must not contain dots.', max_length=255),
        ),
        migrations.AlterField(
            model_name='extension',
            name='name',
            field=models.CharField(help_text='Zone name, must begin with a dot (.example.org)', max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='extension',
            name='origin',
            field=models.ForeignKey(blank=True, help_text='A record associated with the zone', null=True, on_delete=django.db.models.deletion.PROTECT, to='machines.IpList'),
        ),
        migrations.AlterField(
            model_name='extension',
            name='origin_v6',
            field=models.GenericIPAddressField(blank=True, help_text='AAAA record associated with the zone', null=True, protocol='IPv6'),
        ),
        migrations.AlterField(
            model_name='iptype',
            name='domaine_ip_netmask',
            field=models.IntegerField(default=24, help_text="Netmask for the domain's IPv4 range", validators=[django.core.validators.MaxValueValidator(31), django.core.validators.MinValueValidator(8)]),
        ),
        migrations.AlterField(
            model_name='iptype',
            name='domaine_ip_network',
            field=models.GenericIPAddressField(blank=True, help_text="Network containing the domain's IPv4 range (optional)", null=True, protocol='IPv4'),
        ),
        migrations.AlterField(
            model_name='iptype',
            name='reverse_v4',
            field=models.BooleanField(default=False, help_text='Enable reverse DNS for IPv4'),
        ),
        migrations.AlterField(
            model_name='iptype',
            name='reverse_v6',
            field=models.BooleanField(default=False, help_text='Enable reverse DNS for IPv6'),
        ),
        migrations.AlterField(
            model_name='machine',
            name='name',
            field=models.CharField(blank=True, help_text='Optional', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='ouvertureportlist',
            name='name',
            field=models.CharField(help_text='Name of the ports configuration', max_length=255),
        ),
        migrations.AlterField(
            model_name='role',
            name='specific_role',
            field=models.CharField(blank=True, choices=[('dhcp-server', 'DHCP server'), ('switch-conf-server', 'Switches configuration server'), ('dns-recursif-server', 'Recursive DNS server'), ('ntp-server', 'NTP server'), ('radius-server', 'RADIUS server'), ('log-server', 'Log server'), ('ldap-master-server', 'LDAP master server'), ('ldap-backup-server', 'LDAP backup server'), ('smtp-server', 'SMTP server'), ('postgresql-server', 'postgreSQL server'), ('mysql-server', 'mySQL server'), ('sql-client', 'SQL client'), ('gateway', 'Gateway')], max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='service',
            name='min_time_regen',
            field=models.DurationField(default=datetime.timedelta(0, 60), help_text='Minimal time before regeneration of the service.'),
        ),
        migrations.AlterField(
            model_name='service',
            name='regular_time_regen',
            field=models.DurationField(default=datetime.timedelta(0, 3600), help_text='Maximal time before regeneration of the service.'),
        ),
        migrations.AlterField(
            model_name='soa',
            name='expire',
            field=models.PositiveIntegerField(default=3600000, help_text='Seconds before the secondary DNS stop answering requests in case of primary DNS timeout'),
        ),
        migrations.AlterField(
            model_name='soa',
            name='mail',
            field=models.EmailField(help_text='Contact email address for the zone', max_length=254),
        ),
        migrations.AlterField(
            model_name='soa',
            name='refresh',
            field=models.PositiveIntegerField(default=86400, help_text='Seconds before the secondary DNS have to ask the primary DNS serial to detect a modification'),
        ),
        migrations.AlterField(
            model_name='soa',
            name='retry',
            field=models.PositiveIntegerField(default=7200, help_text='Seconds before the secondary DNS ask the serial again in case of a primary DNS timeout'),
        ),
        migrations.AlterField(
            model_name='soa',
            name='ttl',
            field=models.PositiveIntegerField(default=172800, help_text='Time to Live'),
        ),
        migrations.AlterField(
            model_name='srv',
            name='port',
            field=models.PositiveIntegerField(help_text='TCP/UDP port', validators=[django.core.validators.MaxValueValidator(65535)]),
        ),
        migrations.AlterField(
            model_name='srv',
            name='priority',
            field=models.PositiveIntegerField(default=0, help_text='Priority of the target server (positive integer value, the lower it is, the more the server will be used if available)', validators=[django.core.validators.MaxValueValidator(65535)]),
        ),
        migrations.AlterField(
            model_name='srv',
            name='target',
            field=models.ForeignKey(help_text='Target server', on_delete=django.db.models.deletion.PROTECT, to='machines.Domain'),
        ),
        migrations.AlterField(
            model_name='srv',
            name='ttl',
            field=models.PositiveIntegerField(default=172800, help_text='Time to Live'),
        ),
        migrations.AlterField(
            model_name='srv',
            name='weight',
            field=models.PositiveIntegerField(default=0, help_text='Relative weight for records with the same priority (integer value between 0 and 65535)', validators=[django.core.validators.MaxValueValidator(65535)]),
        ),
    ]
